"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.userService = void 0;
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const userMemoryRepo_1 = require("../repositories/memory/userMemoryRepo");
const userSqlRepo_1 = require("../repositories/sql/userSqlRepo");
const isProduction = process.env.NODE_ENV === 'production';
const userRepo = isProduction ? userSqlRepo_1.sqlUserRepository : userMemoryRepo_1.memoryUserRepository;
exports.userService = {
    async register(username, password) {
        const existing = await userRepo.findByUsername(username);
        if (existing)
            throw new Error('Username already exists');
        const hash = await bcryptjs_1.default.hash(password, 10);
        const user = { username, password: hash };
        // @ts-ignore: id will be auto-generated by repo
        return userRepo.create(user);
    },
    async login(username, password) {
        const user = await userRepo.findByUsername(username);
        if (!user)
            throw new Error('Invalid credentials');
        const valid = await bcryptjs_1.default.compare(password, user.password);
        if (!valid)
            throw new Error('Invalid credentials');
        return user;
    },
    async findById(id) {
        return userRepo.findById(id);
    }
};
