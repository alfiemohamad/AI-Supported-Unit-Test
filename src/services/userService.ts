import bcrypt from 'bcryptjs';
import type { User } from '../models/user';
import { memoryUserRepository } from '../repositories/memory/userMemoryRepo';
import { sqlUserRepository } from '../repositories/sql/userSqlRepo';

const isProduction = process.env.NODE_ENV === 'production';
const userRepo = isProduction ? sqlUserRepository : memoryUserRepository;

export const userService = {
  async register(username: string, email: string, password: string): Promise<User> {
    const existingUsername = await userRepo.findByUsername(username);
    if (existingUsername) throw new Error('Username already exists');
    const existingEmail = await userRepo.findByEmail(email);
    if (existingEmail) throw new Error('Email already exists');
    const hash = await bcrypt.hash(password, 10);
    const user: Omit<User, 'id'> = { username, email, password: hash };
    // @ts-ignore: id will be auto-generated by repo
    return userRepo.create(user);
  },
  async login(email: string, password: string): Promise<User> {
    const user = await userRepo.findByEmail(email);
    if (!user) throw new Error('Invalid credentials');
    const valid = await bcrypt.compare(password, user.password);
    if (!valid) throw new Error('Invalid credentials');
    return user;
  },
  async findById(id: number) {
    return userRepo.findById(id);
  }
};
